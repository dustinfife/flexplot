% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_logistic_magnet.R
\name{magnet_plot}
\alias{magnet_plot}
\title{Magnet Plot: Stacked Dot Plot for Binary Outcome with Logistic Fit}
\usage{
magnet_plot(formula, data, jitter = TRUE, alpha = 0.6, dot_size = 2)
}
\arguments{
\item{formula}{A formula in the form `Y ~ X`, where `Y` is a binary variable (0/1) and `X` is a categorical predictor.}

\item{data}{A data frame containing the variables specified in the formula.}

\item{jitter}{Logical; if `TRUE`, dots will be horizontally jittered to reduce overplotting. Default is `TRUE`.}

\item{alpha}{Numeric; transparency level for dots (between 0 and 1). Default is `0.6`.}

\item{dot_size}{Numeric; size of the dots. Default is `2`.}
}
\value{
A `ggplot` object showing:
  - Stacked dots representing individual observations, scaled relative to the group with the maximum sample size.
  - A dashed horizontal line at y = 0.5.
  - Blue points indicating logistic regression predicted probabilities for each group.
  - Sample size labels above each group.
}
\description{
Creates a "magnet plot" â€” a proportional stacked dot plot for a binary outcome 
variable (0/1), scaled relative to the group with the largest sample size. The function
also overlays the predicted probabilities from a logistic regression model and includes
optional horizontal jittering and transparency for dot visibility.
}
\details{
The Y-axis is bounded between 0 and 1, with dots for `Y = 0` stacking upward from 0 and dots for `Y = 1` stacking downward from 1.
The height of each stack is proportional to both the proportion of 0/1 outcomes within each group and the total sample size of that group,
relative to the group with the largest sample size.

The function assumes that `Y` is binary-coded as 0 and 1. If it is not, you should recode it prior to using this function.
}
\examples{
set.seed(123)
df = data.frame(
  X = rep(c("A", "B", "C"), times = c(50, 300, 100)),
  Y = c(
    rbinom(50, 1, 0.8),
    rbinom(300, 1, 0.2),
    rbinom(100, 1, 0.5)
  )
)
magnet_plot(Y ~ X, data = df)

}
